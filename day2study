当数据类型不一样时，将会发生数据类型转换。

自动类型转换（隐式）
  1.特点：代码不需要进行特殊处理，自动完成。
  2.规则：数据范围从小到大。
  
强制类型转换（显式）
  
public class Demo01DataType{
	public static void main(String[] args){
		System.out.println(1024); // it will be (int) type 
		System.out.println(3.14);// it will be (double) type
		
    //从 int --> long，符合了数据从小到大//
		long num1 = 100;
		System.out.println(num1);
    
    //float --> double, 符合从小到大
    double num2 = 2.5F;
    System.out.println(num2);
	}
}
=================================================================================================================================
强制类型转换（显式）
  1.特点：代码需要特殊的格式处理，不能自动完成。
  2.格式：范围小的类型   范围小的变量名 = （范围小的数据类型） 原本范围大的数据；
  
注意事项：
  1. 强制类型转换一般不推荐使用，因为有可能发生精度丢失、数据溢出。
  2. byte/short/char 这三种类型都可发生数学运算，例如加法“ + ” 。 
  3. byte/short/char 这三种类型都可发生数学运算，在运算的时侯，都会被首先提升成为int类型，然后再计算。 
  4. boolean类型不能发生数据类型转换。
  
public class Demo02DataType{
	public static void main(String[] args){
  
  //long --> int， 不是从小到大
  //格式：范围小的变量名 = （范围小的数据类型） 原本范围大的数据；
		int num1 = （int）100L;
		System.out.println(num1);
    
    int num2 = (int) 3.5;
    System.out.println(num2);// 3
    
		char zifu1 = 'A' ; 
    System.out.println(zifu1 + 1); // 66, A = 65
	}
}
===============================================================================================================================
ASCII 值 ：
48 ---> 0 ;  65 ---> A; 97 ---> a;
==============================================================================================================================
运算符：进行特点运算的符号，例如“+”。

注意事项：
  1.一旦运算当中有不同类型的数据，那么结果将会是数据类型范围大的那种。
加：+
减：-
乘：*
除：/
取模（取余数）mod：%
===============================================================================================================================
自增运算符：++
自减运算符：--

使用方式：
	1.单独使用：不和其他任何操作混合，自己独立成为一个步骤。
	2.混合使用：和其他操作混合，例如与赋值混合，或者与打印操作混合等。
使用区别：
	1.在单独使用的时候，前++和后++没有任何区别，也就是说：++num = num++，是完全一样的。
	2.在混合使用的时候，有【重大区别】
		A.如果前++，那么变量【立刻马上 +1】，然后拿着结果进行使用， 【先加后用】
		B.如果后++，那么首先使用变量本来的数值，【然后再 +1】，	    【先用后加】
注意事项：
      只有变量才能使用自增，自减。常量不可发生改变，所以不能用. 例如：30++（error）
      
public class Demo06Operator{
	public static void main(String[] args){
		int num1 = 10;
		System.out.println(num1);//10
		++num1;
		System.out.println(num1);//11
		num1++
		System.out.println(num1);//12
		
		int num2 = 20;
		System.out.println(++num2); // 21
		System.out.println(num2); // 21
		
		int num3 = 30;
		System.out.println(num3++); // 30
		System.out.println(num3); // 31
		
		int x = 10;
		int y = 20;
		int result = ++x + y--;
		System.out.println(result); // 31
		System.out.println(x); //11
		System.out.println(y); //19
	}
}
